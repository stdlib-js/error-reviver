{
  "version": 3,
  "sources": ["../lib/ctors.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar CTORS = {\n\t'Error': Error,\n\t'TypeError': TypeError,\n\t'SyntaxError': SyntaxError,\n\t'ReferenceError': ReferenceError,\n\t'URIError': URIError,\n\t'EvalError': EvalError,\n\t'RangeError': RangeError\n};\n\n\n// EXPORTS //\n\nmodule.exports = CTORS;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar ctors = require( './ctors.js' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized error object.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Error|SyntaxError|URIError|EvalError|ReferenceError|RangeError|TypeError)} value or error object\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n*\n* var str = '{\"type\":\"TypeError\",\"message\":\"beep\"}';\n* var err = parseJSON( str, reviveError );\n* // returns <TypeError>\n*/\nfunction reviveError( key, value ) {\n\tvar hasStack;\n\tvar ctor;\n\tvar keys;\n\tvar err;\n\tvar k;\n\tvar i;\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tisString( value.message )\n\t) {\n\t\tctor = ctors[ value.type ];\n\t\tif ( ctor ) {\n\t\t\terr = new ctor( value.message );\n\t\t\tkeys = objectKeys( value );\n\t\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t\tk = keys[ i ];\n\t\t\t\tif (\n\t\t\t\t\tk === 'type' ||\n\t\t\t\t\tk === 'message' ||\n\t\t\t\t\tk === 'name' // read-only for built-ins\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif ( k === 'stack' ) {\n\t\t\t\t\tif ( !isString( value[k] ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\thasStack = true;\n\t\t\t\t}\n\t\t\t\terr[ k ] = value[ k ];\n\t\t\t}\n\t\t\tif ( !hasStack && isString( err.stack ) ) {\n\t\t\t\terr.stack = '';\n\t\t\t}\n\t\t\treturn err;\n\t\t}\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviveError;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized error object.\n*\n* @module @stdlib/error-reviver\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n* var reviver = require( '@stdlib/error-reviver' );\n*\n* var str = '{\"type\":\"TypeError\",\"message\":\"beep\"}';\n* var err = parseJSON( str, reviver );\n* // returns <TypeError>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,CACX,MAAS,MACT,UAAa,UACb,YAAe,YACf,eAAkB,eAClB,SAAY,SACZ,UAAa,UACb,WAAc,UACf,EAKAD,EAAO,QAAUC,ICnCjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,oBAAqB,EAC3CC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAQ,IAmBZ,SAASC,EAAaC,EAAKC,EAAQ,CAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACA,EACJ,GACCL,GACAA,EAAM,MACNJ,EAAUI,EAAM,OAAQ,IAExBE,EAAOL,EAAOG,EAAM,IAAK,EACpBE,GAAO,CAGX,IAFAE,EAAM,IAAIF,EAAMF,EAAM,OAAQ,EAC9BG,EAAOR,EAAYK,CAAM,EACnB,EAAI,EAAG,EAAIG,EAAK,OAAQ,IAE7B,GADAE,EAAIF,EAAM,CAAE,EAEX,EAAAE,IAAM,QACNA,IAAM,WACNA,IAAM,QAIP,IAAKA,IAAM,QAAU,CACpB,GAAK,CAACT,EAAUI,EAAMK,CAAC,CAAE,EACxB,SAEDJ,EAAW,EACZ,CACAG,EAAKC,CAAE,EAAIL,EAAOK,CAAE,EAErB,MAAK,CAACJ,GAAYL,EAAUQ,EAAI,KAAM,IACrCA,EAAI,MAAQ,IAENA,CACR,CAED,OAAOJ,CACR,CAKAN,EAAO,QAAUI,ICpDjB,IAAIQ,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_ctors", "__commonJSMin", "exports", "module", "CTORS", "require_main", "__commonJSMin", "exports", "module", "objectKeys", "isString", "ctors", "reviveError", "key", "value", "hasStack", "ctor", "keys", "err", "k", "main"]
}
